

// 1) Filtering of lists / cards :-

// We have to filter the cards in UI on happening of an event :-


// LOGIC :-
// The UI of cards is getting generated by the list
// since the data and count of cards are coming from the list or array of JSON objects, etc
// No. of cards in UI = No. of elements in the list
// If we pass an empty list then, the whole UI will be bank with no cards
// The UI layer will display what the data layer passes it.


// WORK :-
// hence on the happening of the event ( inside Event Handlers)
// -->  we must filter the list from where the data is coming
// --> and then, update / rerender the UI again so that we render the filtered cards





// i) Filtering the list

// ==> Use filter method on the list inside eventListener
// ==> Apply it to reinitialize the list itself
// Syntax :- resList = resList.filter(callback())

// e.g :- Filter the list on click of a button

//Note :- the list which we will import cannot be reinitialized using filter, hence we have to copy the list in a separate local variable and then reinitialize that using filter()
// make sure that we use let ,var and not const to avoid errors 


import resList from "./src/utils/mockData";

let restaurantList = resList;
<button onClick={
  () => {
    restaurantList = restaurantList.filter((card) => {
      return card.data.stars > 4.0;
    })
  }
}>
  Click Me
</button>






//ii) Updating the UI (rerendering) using useState()
// ==> only updating the list to filtered list, will update the list but won't update the UI till we use useState() hook

// Instead of copying the imported list into a local JS variable
// Declare a local (inside component where it would be used) State variable using useState() hook.
// Use 'let' or 'var' instead of 'const' 
// Initialize that State variable with the data of the imported list

//e.g :-
//  let [new_list, setNew_List] = useState(imported_List);


// Note instead of using imported_list for data to create cards using map(), we will now use this 


// Inside the Event Handlers, filter the 'imported List' / 'State Variable list' using filter() and store it in a new JS variable ( filteredList ), since filter() always returns the filtered array
// Use the set() to update the local State variable with the filteredList variable so that the UI rerenders

// e.g :-
/*
<button onClick={()=>
  {
    const filteredList = new_List.filter((new_data)=>
    {
      return (condition)
    })
    setNew_List(filteredList);
  }
}
> Hi </button>
*/


//e.g :-
const Body = () => {
  let [listOfRestaurants, setListOfRestaurants] = useState(resList);      //local state variable
  return (
    <button onClick={
      () => {
        let filteredList = listOfRestaurants.filter((cards) => {
          return cards.stars > 4;    //condition 
        })

        setListOfRestaurants(filteredList);    //using set() of useState to rerender the UI
      }
    }
    >
    </button>
  );
}